<?php
/**
 * Controlador para enviar archivos multimedia (PDF) a través de la API externa
 * Este script maneja la integración con la API de envío de documentos/media
 * con soporte para cURL o Guzzle como alternativa
 */

// Configurar cabeceras para JSON
header('Content-Type: application/json');
header('Cache-Control: no-cache, must-revalidate');
header('Expires: 0');

// Aseguramos que todas las rutas sean relativas al directorio raíz
$rutaBase = dirname(__FILE__, 2); // Obtiene la ruta del directorio raíz (dos niveles arriba)
require_once $rutaBase . "/model/conexion.php";

// Incluir el autoloader de Composer para usar Guzzle si es necesario
require_once $rutaBase . '/vendor/autoload.php';

// Importar las clases de Guzzle
use GuzzleHttp\Client;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Exception\ConnectException;

// Iniciar sesión si no está iniciada
if (!isset($_SESSION)) {
    session_start();
}

/**
 * Función para enviar media usando cURL
 */
function enviarMediaPorCurl($apiUrl, $username, $password, $postData, $datos) {
    // Convertir el array a formato de formulario para POST
    $postDataString = http_build_query($postData);
    
    // Inicializar cURL
    $ch = curl_init($apiUrl);
    
    // Configurar cURL
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
    curl_setopt($ch, CURLOPT_POST, true);
    curl_setopt($ch, CURLOPT_POSTFIELDS, $postDataString);
    curl_setopt($ch, CURLOPT_HTTPAUTH, CURLAUTH_BASIC);
    curl_setopt($ch, CURLOPT_USERPWD, $username . ':' . $password);
    curl_setopt($ch, CURLOPT_HTTPHEADER, [
        'Content-Type: application/x-www-form-urlencoded',
        'Accept: application/json'
    ]);
    
    // Configuración para depuración
    curl_setopt($ch, CURLINFO_HEADER_OUT, true);
    curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, 0);
    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, 0);
    
    // Ejecutar la solicitud
    $result = curl_exec($ch);
    $error = curl_error($ch);
    $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);
    $headerSent = curl_getinfo($ch, CURLINFO_HEADER_OUT);
    
    // Cerrar sesión cURL
    curl_close($ch);
    
    // Registrar detalles para depuración
    error_log('Encabezados enviados (cURL): ' . $headerSent);
    error_log('Código de respuesta: ' . $httpCode);
    
    // Manejar errores de conexión
    if ($error) {
        error_log('Error cURL al conectar con la API externa: ' . $error);
        
        echo json_encode([
            'success' => false, 
            'error' => 'Error al conectar con la API externa: ' . $error, 
            'debug_info' => [
                'request' => $headerSent,
                'postData' => $postData,
                'mediaUrl' => $datos['mediaUrl']
            ]
        ]);
    } else {
        // Verificar el código HTTP
        if ($httpCode != 200) {
            error_log('Error HTTP al conectar con la API externa. Código: ' . $httpCode);
            error_log('Respuesta recibida: ' . $result);
            
            echo json_encode([
                'success' => false, 
                'error' => 'Error del servidor: código ' . $httpCode, 
                'debug_info' => [
                    'request' => $headerSent,
                    'postData' => $postData,
                    'response' => $result,
                    'httpCode' => $httpCode
                ]
            ]);
        } else {
            // Decodificar respuesta
            $response = json_decode($result, true);
            
            // Registrar respuesta para depuración
            error_log('Respuesta de la API (cURL): ' . $result);
            
            // Verificar si la respuesta fue exitosa
            if ($response !== null && isset($response['status']) && $response['status'] === 'ok') {
                error_log('Envío de documento exitoso a: ' . $postData['telefono']);
                echo json_encode([
                    'success' => true, 
                    'data' => $response,
                    'method' => 'curl',
                    'message' => 'Documento enviado correctamente al número: ' . $postData['telefono']
                ]);
            } else {
                error_log('Error en la respuesta de la API: ' . $result);
                echo json_encode([
                    'success' => false, 
                    'error' => 'Error en la respuesta de la API', 
                    'response' => $response ?? 'Respuesta inválida',
                    'rawResponse' => $result
                ]);
            }
        }
    }
}

/**
 * Función para enviar media usando Guzzle
 */
function enviarMediaPorGuzzle($apiUrl, $username, $password, $postData, $datos) {
    try {
        // Inicializar el cliente Guzzle
        $client = new Client([
            'timeout' => 30,
            'verify' => false // No verificar SSL en desarrollo
        ]);

        // Ejecutar la solicitud con Guzzle
        $response = $client->request('POST', $apiUrl, [
            'auth' => [$username, $password],
            'form_params' => $postData,
            'headers' => [
                'Accept' => 'application/json',
                'Content-Type' => 'application/x-www-form-urlencoded',
            ]
        ]);
        
        // Obtener información de la respuesta
        $httpCode = $response->getStatusCode();
        $responseBody = $response->getBody()->getContents();
        
        // Registrar información detallada para depuración
        error_log("Solicitud HTTP a API (Guzzle)");
        error_log("Código de respuesta HTTP: " . $httpCode);
        
        // Verificar código de respuesta HTTP
        if ($httpCode >= 400) {
            error_log("Error HTTP al enviar documento (Guzzle): " . $httpCode);
            error_log("Respuesta del servidor: " . $responseBody);
            
            echo json_encode([
                'success' => false, 
                'error' => 'Error del servidor: código ' . $httpCode,
                'debug_info' => [
                    'postData' => $postData,
                    'response' => $responseBody
                ]
            ]);
            return;
        }

        // Intentar decodificar la respuesta JSON
        $responseData = json_decode($responseBody, true);
        
        // Verificar si la respuesta es válida
        if ($responseData === null && json_last_error() !== JSON_ERROR_NONE) {
            error_log("Error al decodificar respuesta JSON (Guzzle): " . json_last_error_msg());
            error_log("Respuesta recibida: " . $responseBody);
            
            echo json_encode([
                'success' => false,
                'error' => 'Respuesta inválida del servidor',
                'raw_response' => $responseBody
            ]);
            return;
        }
        
        // Verificar si la respuesta fue exitosa
        if (isset($responseData['status']) && $responseData['status'] === 'ok') {
            error_log('Envío de documento exitoso a: ' . $postData['telefono'] . ' (Guzzle)');
            
            echo json_encode([
                'success' => true, 
                'data' => $responseData,
                'method' => 'guzzle',
                'message' => 'Documento enviado correctamente al número: ' . $postData['telefono']
            ]);
        } else {
            error_log('Error en la respuesta de la API (Guzzle): ' . $responseBody);
            
            echo json_encode([
                'success' => false, 
                'error' => 'Error en la respuesta de la API', 
                'response' => $responseData ?? 'Respuesta inválida',
                'rawResponse' => $responseBody
            ]);
        }
        
    } catch (RequestException $e) {
        $errorMsg = $e->getMessage();
        error_log("Error Guzzle (RequestException) al enviar documento: " . $errorMsg);
        
        // Intentar obtener respuesta si existe
        $response = $e->hasResponse() ? $e->getResponse()->getBody()->getContents() : 'Sin respuesta';
        
        echo json_encode([
            'success' => false,
            'error' => 'Error de conexión: ' . $errorMsg,
            'debug_info' => [
                'exception' => get_class($e),
                'response' => $response,
                'postData' => $postData
            ]
        ]);
    } catch (ConnectException $e) {
        $errorMsg = $e->getMessage();
        error_log("Error Guzzle (ConnectException) al enviar documento: " . $errorMsg);
        
        echo json_encode([
            'success' => false,
            'error' => 'Error de conexión: ' . $errorMsg,
            'debug_info' => [
                'exception' => get_class($e),
                'postData' => $postData
            ]
        ]);
    } catch (Exception $e) {
        $errorMsg = $e->getMessage();
        error_log("Error general al enviar documento con Guzzle: " . $errorMsg);
        
        echo json_encode([
            'success' => false,
            'error' => 'Error inesperado: ' . $errorMsg
        ]);
    }
}

// Verificar si es una solicitud POST
if ($_SERVER['REQUEST_METHOD'] === 'POST') {
    // Obtener datos del cuerpo de la solicitud
    $datos = json_decode(file_get_contents('php://input'), true);
    
    // Verificar si los datos necesarios existen
    if (isset($datos['telefono']) && isset($datos['mediaUrl']) && isset($datos['mediaCaption'])) {
        
        // Validar el teléfono (asegurarse que tiene el formato correcto)
        $telefono = trim($datos['telefono']);
        // Validar que el teléfono tenga un formato válido (puedes ajustar esta validación según tus necesidades)
        if (!preg_match('/^\d{9,15}$/', $telefono)) {
            echo json_encode(['success' => false, 'error' => 'Formato de teléfono inválido']);
            exit;
        }
        
        // Preparar datos para la solicitud a la API externa
        $apiUrl = 'http://aventisdev.com:8082/media.php';
        $username = 'admin';
        $password = '1234';
        
        // Preparar los datos para la solicitud
        $postData = [
            'telefono' => $telefono,
            'mediaUrl' => $datos['mediaUrl'],
            'mediaCaption' => $datos['mediaCaption']
        ];
        
        // Registrar el intento de envío para depuración
        error_log('Enviando documento a ' . $telefono);
        error_log('URL de documento: ' . $datos['mediaUrl']);
        error_log('Datos de envío: ' . json_encode($postData));

        // Verificar si cURL está disponible
        $curlAvailable = function_exists('curl_version');
        
        if ($curlAvailable) {
            // Usar cURL para la solicitud
            enviarMediaPorCurl($apiUrl, $username, $password, $postData, $datos);
        } else {
            // Usar Guzzle como alternativa si cURL no está disponible
            enviarMediaPorGuzzle($apiUrl, $username, $password, $postData, $datos);
        }
    } else {
        echo json_encode(['success' => false, 'error' => 'Faltan parámetros requeridos']);
    }
} else {
    echo json_encode(['success' => false, 'error' => 'Método no permitido']);
}
?>
